// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
  previewFeatures = ["driverAdapters"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isPro         Boolean   @default(false)
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  createdLeagues     League[]    @relation("LeagueCreator")
  createdQuestions   Question[]  @relation("QuestionCreator")
  createdAnswers     Answer[]    @relation("AnswerCreator")
  subscriptions      LeagueSubscription[]
  submissions        Submission[]           
  disputes           Dispute[]
  notifications      Notification[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model League {
  id                  String   @id @default(cuid())
  slug                String   @unique
  name                String
  description         String?
  previewImageUrl     String?
  isPrivate           Boolean  @default(false)
  hasPaidTier         Boolean  @default(false)
  showIntro           Boolean  @default(true)  
  introContent        String?  
  unlockMode          UnlockMode @default(TIMED)
  timedUnlockInterval TimedUnlockInterval?
  startDate           String?
  
  // Foreign Keys
  creatorId           String
  
  // Relations
  creator             User     @relation("LeagueCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  questions           Question[]
  answers             Answer[]
  subscriptions       LeagueSubscription[]
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([creatorId])
  @@index([isPrivate])
}

model LeagueSubscription {
  id        String   @id @default(cuid())
  isPaid    Boolean  @default(false)
  
  // Foreign Keys
  userId    String
  leagueId  String
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  league    League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, leagueId])
  @@index([userId])
  @@index([leagueId])
}

model Question {
  id              String   @id @default(cuid())
  number          Int      @default(autoincrement())
  content         String
  genre           String
  previewImageUrl String?
  mediaUrl        String?
  mediaType       String?
  unlockAt        String?
  draft           Boolean  @default(true)
  
  // Foreign Keys
  creatorId       String
  leagueId        String
  
  // Relations
  creator         User     @relation("QuestionCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  league          League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  answer          Answer?
  submissions     Submission[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([leagueId, number])
  @@index([creatorId])
  @@index([leagueId])
  @@index([draft])
  @@index([genre])
}

model Answer {
  id             String   @id @default(cuid())
  title          String
  keywords       String
  subtitle       String?
  mediaUrl       String?
  mediaType      String?
  
  // Foreign Keys
  creatorId      String
  questionId     String   @unique
  leagueId       String
  
  // Relations
  creator        User     @relation("AnswerCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  question       Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  league         League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  submissions    Submission[]
  disputes       Dispute[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([creatorId])
  @@index([leagueId])
}

model Submission {
  id          String   @id @default(cuid())
  content     String  
  score       Float
  isCorrect   Boolean  @default(false)
  
  // Foreign Keys
  userId      String
  questionId  String
  answerId    String
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer      Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, questionId]) // One submission per user per question
  @@index([userId])
  @@index([questionId])
  @@index([answerId])
  @@index([isCorrect])
}

model Dispute {
  id          String   @id @default(cuid())
  description String
  status      DisputeStatus @default(PENDING)
  aiVerdict   String?
  resolution  String?
  
  // Foreign Keys
  userId      String
  answerId    String
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer      Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([answerId])
  @@index([status])
}

model Notification {
  id          String   @id @default(cuid())
  type        NotificationType
  message     String
  read        Boolean  @default(false)
  
  // Foreign Keys
  userId      String
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([read])
  @@index([type])
}

// Enums
enum DisputeStatus {
  PENDING
  AI_EVALUATED
  ACCEPTED
  REJECTED
}

enum NotificationType {
  DISPUTE_RESOLVED
  SCORE_UPDATED
  SYSTEM
}

enum UnlockMode {
  STEPS
  FREE
  TIMED
}

enum TimedUnlockInterval {
  DAILY
  WEEKLY
  CUSTOM
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}